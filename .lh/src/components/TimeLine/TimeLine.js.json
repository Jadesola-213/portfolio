{
    "sourceFile": "src/components/TimeLine/TimeLine.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1643999055952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1643999777891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,11 +44,8 @@\n \n   return (\n     <Section id=\"about\">\n       <SectionTitle>About Me</SectionTitle>\n-      <SectionText>\n-      The purpose of JavaScript Mastery is to help aspiring and established developers to take their development skills to the next level and build awesome apps.\n-      </SectionText>\n       <CarouselContainer ref={carouselRef} onScroll={handleScroll}>\n         <>\n           {TimeLineData.map((item, index) => (\n             <CarouselMobileScrollNode\n"
                }
            ],
            "date": 1643999055952,
            "name": "Commit-0",
            "content": "import React, { useState, useRef, useEffect } from 'react';\n\nimport { CarouselButton, CarouselButtonDot, CarouselButtons, CarouselContainer, CarouselItem, CarouselItemImg, CarouselItemText, CarouselItemTitle, CarouselMobileScrollNode } from './TimeLineStyles';\nimport { Section, SectionDivider, SectionText, SectionTitle } from '../../styles/GlobalComponents';\nimport { TimeLineData } from '../../constants/constants';\n\nconst TOTAL_CAROUSEL_COUNT = TimeLineData.length;\n\nconst Timeline = () => {\n  const [activeItem, setActiveItem] = useState(0);\n  const carouselRef = useRef();\n\n  const scroll = (node, left) => {\n    return node.scrollTo({ left, behavior: 'smooth' });\n  }\n\n  const handleClick = (e, i) => {\n    e.preventDefault();\n\n    if (carouselRef.current) {\n      const scrollLeft = Math.floor(carouselRef.current.scrollWidth * 0.7 * (i / TimeLineData.length));\n      \n      scroll(carouselRef.current, scrollLeft);\n    }\n  }\n\n  const handleScroll = () => {\n    if (carouselRef.current) {\n      const index = Math.round((carouselRef.current.scrollLeft / (carouselRef.current.scrollWidth * 0.7)) * TimeLineData.length);\n\n      setActiveItem(index);\n    }\n  }\n\n  // snap back to beginning of scroll when window is resized\n  // avoids a bug where content is covered up if coming from smaller screen\n  useEffect(() => {\n    const handleResize = () => {\n      scroll(carouselRef.current, 0);\n    }\n\n    window.addEventListener('resize', handleResize);\n  }, []);\n\n  return (\n    <Section id=\"about\">\n      <SectionTitle>About Me</SectionTitle>\n      <SectionText>\n      The purpose of JavaScript Mastery is to help aspiring and established developers to take their development skills to the next level and build awesome apps.\n      </SectionText>\n      <CarouselContainer ref={carouselRef} onScroll={handleScroll}>\n        <>\n          {TimeLineData.map((item, index) => (\n            <CarouselMobileScrollNode\n              key={index}\n              final={index === TOTAL_CAROUSEL_COUNT - 1}>\n              <CarouselItem\n                index={index}\n                id={`carousel__item-${index}`}\n                active={activeItem}\n                onClick={(e) => handleClick(e, index)}>\n                <CarouselItemTitle>\n                  {`${item.year}`}\n                  <CarouselItemImg\n                    width=\"208\"\n                    height=\"6\"\n                    viewBox=\"0 0 208 6\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\">\n                    <path\n                      fill-rule=\"evenodd\"\n                      clip-rule=\"evenodd\"\n                      d=\"M2.5 5.5C3.88071 5.5 5 4.38071 5 3V3.5L208 3.50002V2.50002L5 2.5V3C5 1.61929 3.88071 0.5 2.5 0.5C1.11929 0.5 0 1.61929 0 3C0 4.38071 1.11929 5.5 2.5 5.5Z\"\n                      fill=\"url(#paint0_linear)\"\n                      fill-opacity=\"0.33\"\n                    />\n                    <defs>\n                      <linearGradient\n                        id=\"paint0_linear\"\n                        x1=\"-4.30412e-10\"\n                        y1=\"0.5\"\n                        x2=\"208\"\n                        y2=\"0.500295\"\n                        gradientUnits=\"userSpaceOnUse\">\n                        <stop stop-color=\"white\" />\n                        <stop\n                          offset=\"0.79478\"\n                          stop-color=\"white\"\n                          stop-opacity=\"0\"\n                        />\n                      </linearGradient>\n                    </defs>\n                  </CarouselItemImg>\n                </CarouselItemTitle>\n                <CarouselItemText>{item.text}</CarouselItemText>\n              </CarouselItem>\n            </CarouselMobileScrollNode>\n          ))}\n        </>\n      </CarouselContainer>\n      <CarouselButtons>\n        {TimeLineData.map((item, index) => {\n          return (\n            <CarouselButton\n              key={index}\n              index={index}\n              active={activeItem}\n              onClick={(e) => handleClick(e, index)}\n              type=\"button\">\n              <CarouselButtonDot active={activeItem} />\n            </CarouselButton>\n          );\n        })}\n      </CarouselButtons>\n      <SectionDivider />\n    </Section>\n  );\n};\n\nexport default Timeline;"
        }
    ]
}